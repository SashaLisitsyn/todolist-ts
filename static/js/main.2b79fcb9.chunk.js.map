{"version":3,"sources":["types/toDoTypes.ts","reducers/toDoReducer.ts","reducers/rootReducer.ts","store/toDoStore.ts","components/Header/index.tsx","components/ToDoForm/index.tsx","actions/toDoActions.ts","components/ToDoItem/index.tsx","hooks/todoTypeSelector.ts","components/ToDoList/index.tsx","components/App/index.tsx","index.tsx"],"names":["toDoTypes","initialState","toDos","rootReducer","combineReducers","state","action","type","CREATE_TODO","concat","payload","REMOVE_TODO","id","filter","toDo","toDoStore","createStore","useStyles","makeStyles","createStyles","header","display","justifyContent","alignItems","Header","classes","AppBar","className","Toolbar","Typography","variant","theme","toDoForm","margin","spacing","width","marginTop","ToDoForm","useState","value","setValue","dispatch","useDispatch","handleSubmit","event","preventDefault","newToDo","Date","now","completed","noValidate","autoComplete","TextField","label","onChange","target","onKeyPress","key","toDo__input","ToDoItem","Accordion","AccordionDetails","Button","color","onClick","removeToDo","useTypedSelector","useSelector","toDoList","paddingTop","ToDoList","map","App","render","store","document","getElementById"],"mappings":"4HAAYA,E,yCAAAA,K,0BAAAA,E,2BAAAA,M,KCQZ,IAAMC,EAAuB,CAC3BC,MAAO,ICLIC,EAAcC,YAAgB,CACzCF,MDSyB,WAGD,IAFxBG,EAEuB,uDAFfJ,EACRK,EACuB,uCACvB,OAAQA,EAAOC,MACb,KAAKP,EAAUQ,YACb,OAAO,2BACFH,GADL,IAEEH,MAAOG,EAAMH,MAAMO,OAAO,CAACH,EAAOI,YAEtC,KAAKV,EAAUW,YACb,IAAMC,EAAKN,EAAOI,QAClB,OAAO,2BACFL,GADL,IAEEH,MAAOG,EAAMH,MAAMW,QAAO,SAACC,GAAD,OAAUA,EAAKF,KAAOA,OAEpD,QACE,OAAOP,ME3BAU,EAAYC,YAAYb,G,0DCG/Bc,EAAYC,aAAW,kBAC3BC,YAAa,CACXC,OAAQ,CACNC,QAAS,OACTC,eAAgB,SAChBC,WAAY,eAKLC,EAAmB,WAC9B,IAAMC,EAAUR,IAEhB,OACE,cAACS,EAAA,EAAD,CAAQC,UAAWF,EAAQL,OAA3B,SACE,cAACQ,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,0E,iBCZFb,EAAYC,aAAW,SAACa,GAAD,OAC3BZ,YAAa,CACXa,SAAU,CACR,QAAS,CACPC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,MACPC,UAAW,gBAMNC,EAAqB,WAChC,IAAMZ,EAAUR,IAEhB,EAA0BqB,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,cAEXC,EAAe,SAACC,EAA6BL,GACjDK,EAAMC,iBACN,IC5BuB/B,ED4BjBgC,EAAiB,CACrBP,MAAOA,EACP3B,GAAImC,KAAKC,MACTC,WAAW,GAEbR,GCjCuB3B,EDiCHgC,EChCf,CACLvC,KAAMP,EAAUQ,YAChBE,QAASI,MD4CX,OACE,sBAAMa,UAAWF,EAAQO,SAAUkB,YAAU,EAACC,aAAa,MAA3D,SACE,cAACC,EAAA,EAAD,CACExC,GAAG,iBACHyC,MAAM,gGACNd,MAAOA,EACPe,SAjBe,SAACV,GACpBJ,EAASI,EAAMW,OAAOhB,QAiBlBiB,WAdiB,SAACZ,GACJ,UAAdA,EAAMa,MACRd,EAAaC,EAAOL,GACpBC,EAAS,W,2BEnCTvB,EAAYC,aAAW,kBAC3BC,YAAa,CACXL,KAAM,CACJO,QAAS,OACTE,WAAY,SACZD,eAAgB,iBAElBoC,YAAa,CACXnD,KAAM,iBASCoD,EAAoC,SAAC,GAAc,IAAZ7C,EAAW,EAAXA,KAC5CW,EAAUR,IAEVwB,EAAWC,cAMjB,OACE,cAACkB,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAkBlC,UAAWF,EAAQX,KAArC,UACE,cAACe,EAAA,EAAD,CAAYF,UAAWF,EAAQiC,YAA/B,SAA6C5C,EAAKyB,QAClD,cAACuB,EAAA,EAAD,CACEhC,QAAQ,YACRiC,MAAM,YACNC,QAXiB,WACvBvB,EDxBsB,SAAC3B,GACzB,MAAO,CACLP,KAAMP,EAAUW,YAChBD,QAASI,GCqBAmD,CAAWnD,EAAKF,MAOrB,8DCtCKsD,EAAoDC,ICI3DlD,EAAYC,aAAW,kBAC3BC,YAAa,CACXiD,SAAU,CACRjC,MAAO,OACPkC,WAAY,aAKLC,EAAqB,WAChC,IAAM7C,EAAUR,IAEVf,EAAQgE,GAAiB,SAACE,GAAD,uBAAcA,EAASlE,aAAvB,aAAc,EAAgBA,SAE7D,OACE,qBAAKyB,UAAWF,EAAQ2C,SAAxB,gBACGlE,QADH,IACGA,OADH,EACGA,EAAOqE,KAAI,SAACzD,GACX,OAAO,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKF,UCrBtB4D,EAAgB,WAC3B,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCFNC,iBACE,cAAC,IAAD,CAAUC,MAAO3D,EAAjB,SACE,cAAC,EAAD,MAEF4D,SAASC,eAAe,W","file":"static/js/main.2b79fcb9.chunk.js","sourcesContent":["export enum toDoTypes {\r\n  CREATE_TODO = 'CREATE_TODO',\r\n  REMOVE_TODO = 'REMOVE_TODO',\r\n}\r\n","import {\r\n  IToDos,\r\n  ICreateToDoAction,\r\n  IRemoveToDoAction,\r\n} from '../interfaces/toDoReduxInterfaces';\r\n\r\nimport { toDoTypes } from '../types/toDoTypes';\r\n\r\nconst initialState: IToDos = {\r\n  toDos: [],\r\n};\r\n\r\ntype toDoAction = ICreateToDoAction | IRemoveToDoAction;\r\n\r\nexport const toDoReducer = (\r\n  state = initialState,\r\n  action: toDoAction\r\n): IToDos | undefined => {\r\n  switch (action.type) {\r\n    case toDoTypes.CREATE_TODO:\r\n      return {\r\n        ...state,\r\n        toDos: state.toDos.concat([action.payload]),\r\n      };\r\n    case toDoTypes.REMOVE_TODO:\r\n      const id = action.payload;\r\n      return {\r\n        ...state,\r\n        toDos: state.toDos.filter((toDo) => toDo.id !== id),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { toDoReducer } from './toDoReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  toDos: toDoReducer,\r\n});\r\n\r\nexport type rootState = ReturnType<typeof rootReducer>;\r\n","import { createStore } from 'redux';\r\n\r\nimport { rootReducer } from '../reducers/rootReducer';\r\n\r\nexport const toDoStore = createStore(rootReducer);\r\n","import React from 'react';\r\n\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    header: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n    },\r\n  })\r\n);\r\n\r\nexport const Header: React.FC = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar className={classes.header}>\r\n      <Toolbar>\r\n        <Typography variant=\"h6\">Список дел</Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { IToDo } from '../../interfaces/toDoInterfaces';\r\n\r\nimport { createToDo } from '../../actions/toDoActions';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    toDoForm: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n        width: '99%',\r\n        marginTop: '4.5rem',\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\nexport const ToDoForm: React.FC = () => {\r\n  const classes = useStyles();\r\n\r\n  const [value, setValue] = useState<string>('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = (event: React.SyntheticEvent, value: string) => {\r\n    event.preventDefault();\r\n    const newToDo: IToDo = {\r\n      value: value,\r\n      id: Date.now(),\r\n      completed: false,\r\n    };\r\n    dispatch(createToDo(newToDo));\r\n  };\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const handleKeyPress = (event: React.KeyboardEvent) => {\r\n    if (event.key === 'Enter') {\r\n      handleSubmit(event, value);\r\n      setValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className={classes.toDoForm} noValidate autoComplete=\"off\">\r\n      <TextField\r\n        id=\"standard-basic\"\r\n        label=\"Что нужно сделать?\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        onKeyPress={handleKeyPress}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n","import { IToDo } from '../interfaces/toDoInterfaces';\r\n\r\nimport { toDoTypes } from '../types/toDoTypes';\r\n\r\nexport const createToDo = (toDo: IToDo) => {\r\n  return {\r\n    type: toDoTypes.CREATE_TODO,\r\n    payload: toDo,\r\n  };\r\n};\r\n\r\nexport const removeToDo = (toDo: IToDo) => {\r\n  return {\r\n    type: toDoTypes.REMOVE_TODO,\r\n    payload: toDo,\r\n  };\r\n};\r\n","import React from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { removeToDo } from '../../actions/toDoActions';\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    toDo: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'space-between',\r\n    },\r\n    toDo__input: {\r\n      type: 'checkbox',\r\n    },\r\n  })\r\n);\r\n\r\ntype ToDoItemProps = {\r\n  toDo: any;\r\n};\r\n\r\nexport const ToDoItem: React.FC<ToDoItemProps> = ({ toDo }) => {\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleRemoveToDo = () => {\r\n    dispatch(removeToDo(toDo.id));\r\n  };\r\n\r\n  return (\r\n    <Accordion>\r\n      <AccordionDetails className={classes.toDo}>\r\n        <Typography className={classes.toDo__input}>{toDo.value}</Typography>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={handleRemoveToDo}\r\n        >\r\n          Удалить\r\n        </Button>\r\n      </AccordionDetails>\r\n    </Accordion>\r\n  );\r\n};\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\n\r\nimport { rootState } from '../reducers/rootReducer';\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<rootState> = useSelector;\r\n","import React from 'react';\r\n\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { ToDoItem } from '../ToDoItem';\r\n\r\nimport { useTypedSelector } from '../../hooks/todoTypeSelector';\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    toDoList: {\r\n      width: '100%',\r\n      paddingTop: '2rem',\r\n    },\r\n  })\r\n);\r\n\r\nexport const ToDoList: React.FC = () => {\r\n  const classes = useStyles();\r\n\r\n  const toDos = useTypedSelector((toDoList) => toDoList.toDos?.toDos);\r\n\r\n  return (\r\n    <div className={classes.toDoList}>\r\n      {toDos?.map((toDo) => {\r\n        return <ToDoItem key={toDo.id} toDo={toDo} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import { Header } from '../Header';\r\nimport { ToDoForm } from '../ToDoForm';\r\nimport { ToDoList } from '../ToDoList';\r\n\r\nexport const App: React.FC = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <ToDoForm />\r\n      <ToDoList />\r\n    </>\r\n  );\r\n};\r\n","import { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { toDoStore } from './store/toDoStore';\r\n\r\nimport { App } from './components/App';\r\n\r\nrender(\r\n  <Provider store={toDoStore}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}